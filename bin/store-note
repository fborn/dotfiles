#!/usr/bin/env python 

import os
import sys
import argparse
import sys
import logging

from evernote.api.client import EvernoteClient
import evernote.edam.type.ttypes as Types

TOKEN = 'EVERNOTE_DEV_TOKEN'

FORMAT = "%(asctime)-15s %(levelname)s:%(message)s"
logging.basicConfig(format=FORMAT)
LOG=logging.getLogger(__name__)

def process_content(content):
    new_content = '<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE en-note SYSTEM "http://xml.evernote.com/pub/enml2.dtd">'
    new_content += '<en-note>'
    for _line in content:
       new_content += "<div>%s</div>" % _line[:-1]
    new_content += '</en-note>'
    return new_content

def process_note(args, content):
    if args.token:
        LOG.debug("Opening client with explicit token")
    else:
        LOG.debug("Opening client with os env var %s", TOKEN)
    client = EvernoteClient(
        token=args.key,
        sandbox=False,
        )
    userStore = client.get_user_store()
    user = userStore.getUser()
    LOG.debug("Access to evernote account for user %s", user.username)

    LOG.debug('Title: %s', args.title)
    LOG.debug('Note:\n' + content)
    if not args.dryrun:
        note = Types.Note()
        note.title = args.title
        note.content = content
        noteStore = client.get_note_store()
        note = noteStore.createNote(note)
        if not args.quiet:
            LOG.info("Note created with id %s", note.guid)

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="storing a note into your evernote")
    group = parser.add_mutually_exclusive_group()
    group.add_argument("-d", "--debug", action="store_true", help="explicit debugging mode")
    group.add_argument("-r", "--dryrun", action="store_true", help="dry run only do no store")
    group.add_argument("-v", "--verbose", action="store_true", help="increase verbosity")
    group.add_argument("-q", "--quiet", action="store_true", help="be silent")
    parser.add_argument("--token", type=str, help="explicit token, not using env var %s" % TOKEN)
    parser.add_argument("-t", "--title", type=str, default="uploaded note", help="title for the note to upload")
    parser.add_argument("note", nargs='?', type=argparse.FileType('r'), default=sys.stdin, help="the note to process")
    args = parser.parse_args()
    if args.quiet:
        LOG.setLevel(logging.ERROR)
    elif args.verbose:
        LOG.setLevel(logging.INFO)
    elif args.debug or args.dryrun:
        LOG.setLevel(logging.DEBUG)
    else:
        LOG.setLevel(logging.WARNING)
    if args.token:
        args.key = args.token
    else:
        try:
            args.key = os.environ[TOKEN]
        except KeyError:
            LOG.debug('Get token here: https://www.evernote.com/api/DeveloperToken.action')
            parser.error('Token %s is not set' % TOKEN)
    if args.note == sys.stdin:
        LOG.debug('reading from stdin')
    try:
        LOG.warning("Storing note into evernote")
        process_note(args, process_content(args.note.readlines()))
    except IOError, e:
        LOG.debug(e)
        parser.error('Could not connect to evernote service')
